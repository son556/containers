12/11

https://modoocode.com/293

constexpr: constexpr을 선언하면 컴파일 타임에 해당 값을 상수로 만들 수 있음

constexpr int Factorial(int n) {
  int total = 1;
  for (int i = 1; i <= n; i++) {
    total *= i;
  }
  return total;
}

template <int N>
struct A {
  int operator()() { return N; }
};

int main() {
  A<Factorial(10)> a;

  std::cout << a() << std::endl;
}

위와 같은 코드를 실행 할 수 있음 그냥 int Factorial인 경우 template 의 N에 어떤 값이 들어가야 하는 지 알지 
못하지만 constexpr을 사용하면 컴파일 타임에 해당 값을 알 수 있게 해줌

constexpr을 사용하지 않으려면

template<int N>
struct Factorial {
    static const int value = Factorial<N - 1>::value * N;
};

template<>
struct Factorial<0> {
    static const int value = 1;
};

template <int N>
struct A {
  int operator()() { return N; }
};

int main() {
  // 컴파일 타임에 값이 결정되므로 템플릿 인자로 사용 가능!
  A<Factorial<10>::value> a;

  std::cout << a() << std::endl;
}

이런식으로 메타프로그래밍을 해야 함